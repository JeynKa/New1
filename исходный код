#include <vcl.h>
#pragma hdrstop
#pragma argsused
#pragma once
#include <iostream>
#include <alloc.h>
#include <conio.h>
#include "Street.h"
#include "Apartment.h"
#include "Home.h"
#include "ApartmentList.h"
#include "HomeList.h"


using namespace std;
  ApartmentList apartments;
  HomeList Homes;
   //методы класса Apartment
  Apartment::Apartment(){};
  Apartment::Apartment(int NumApartment,int CountPeopleApartment, float AreaApartment, float PayApartment){};
  Apartment::~Apartment(){};
  int Apartment::getNumApartment() {return NumApartment;}
  int Apartment::getCountPeopleApartment() {return CountPeopleApartment;}
  float Apartment::getAreaApartment()  {return AreaApartment;}
  float Apartment::getPayApartment()  {return PayApartment;}
  void Apartment::setNumApartment(int NumApartment){this -> NumApartment = NumApartment;}
  void Apartment::setCountPeopleApartment(int CountPeopleApartment) {this -> CountPeopleApartment= CountPeopleApartment; }
  void Apartment::setAreaApartment(float AreaApartment){this -> AreaApartment = AreaApartment;}
  void Apartment::setPayApartment(float PayApartment){this -> PayApartment = PayApartment;}

  //Методы класса Home
  Home::Home(){};
  Home::Home(int number,int numberOfStories){};
  Home::~Home(){};
  int Home::getNumber() { return number; }
  int Home::getNumberOfStories() { return numberOfStories; }
  void Home::setNumber(int number) {
    this->number = number;
  }
  void Home::setNumberOfStories(int numberOfStories) {
    this->numberOfStories = numberOfStories;
  }
  unsigned int Home::getNumberOfApartments() { return apartments.getSize(); }

  Apartment &getApartment(unsigned int position) {
    return apartments[position];
  }
  void Home::addApartment(const Apartment &apartment) {
    apartments.insert(apartments.getSize(), apartment);
  }
  void Home::addApartment(unsigned int position, const Apartment &apartment) {
    apartments.insert(position, apartment);
  }
  unsigned int Home::getNumberOfPeople()  {  //Получить число жителей дома
    unsigned int result = 0;
    for (unsigned int i = 0; i < getNumberOfApartments(); ++i) {
      result += getApartment(i).CountPeopleApartment;
    }
    return result;
  }
  float Home::getPayOfApartments() { // Получить общий долг по дому
  float result = 0;           
    for (unsigned int i = 0; i < getNumberOfApartments(); ++i) {
      result += getApartment(i).PayApartment;
    }
    return result;
  }
  //методы класса Street
  Street::Street() {
    name[0] = '\0';
  }
  Street::Street(const char *name) {
    strcpy(this->name, name);
  }
  Street::~Street() {}
  void Street::setName(const char *name) {
  strcpy(this->name, name);
  }
  char Street::getName(){return *name;}
  unsigned int Street::getNumberOfHomes() { return Homes.getSize(); }

  Home Street::getHome(unsigned int position) {
    return Homes[position];
  }
  void Street::addHome1(const Home &Home) {
    Homes.insert(Homes.getSize(), Home);
  }
  void Street::addHome2(unsigned int position, const Home &Home) {
    Homes.insert(position, Home);
  }
  void Street::delHome (unsigned int position) {
      Homes.remove(position);
  }
  unsigned int Street::getNumberOfSouls() {
    unsigned int result = 0;
    for (unsigned int i = 0; i < getNumberOfHomes(); ++i) {
      result += getHome(i).getNumberOfPeople();
    }
    return result;
  }
  unsigned int Street::getNumberOfApartments() {
    unsigned int result = 0;
    for (unsigned int i = 0; i < getNumberOfHomes(); ++i) {
      result += getHome(i).getNumberOfApartments();
    }
    return result;
  }

  void Street::operator +(const Street &Street){//перегружаем оператор =
  for(int i=0;i<Street.Homes.getSize();i++){
   Homes.insert(Homes.getSize(),Street.getHome(i));  }
  }

//форматирование вывода объектов классов
std::ostream &operator<<(std::ostream &stream, const Apartment &apartment) {
  return stream << "Apartment{" <<
    "NumApartment=" << apartment.getNumApartment() << "," <<
    "CountPeopleApartment=" << apartment.getCountPeopleApartment() << "," <<
    "AreaApartment=" << apartment.getAreaApartment() << "," <<
    "PayApartment=" << apartment.getPayApartment() << "}";
};
std::ostream &operator<<(std::ostream &stream, const Home &Home) {
  return stream << "Home{" <<
    "number=" << Home.getNumber() << "\n" <<
    "numberOfStories=" << Home.getNumberOfStories() << "\n" <<
    "NumberOfPeople=" << Home.getNumberOfPeople() << "\n" <<
    "PaymentOfHome=" << Home.getPayOfApartments() << "\n" <<
    "}";
}
std::ostream &operator<<(std::ostream &stream, const Street &street) {
  stream << "Street{" <<
    "name='" << street.name << "'\n" <<
    "numberOfApartments=" << street.getNumberOfApartments() << "\n" <<
    "numberOfSouls=" << street.getNumberOfSouls() << "\n" <<
    "numberOfHomes=" << street.getNumberOfHomes() << " \n   " <<
    "Homes=[";
  if (street.getNumberOfHomes() > 0) {
    for (unsigned int i = 0; i < street.getNumberOfHomes(); ++i) {
      stream << std::endl << " " << street.getHome(i);
      if (i + 1 < street.getNumberOfHomes()) {
        stream << ",";
      }
    }
  }
  return stream << "]}";
}

int main(int argc, char* argv[])
{
    //////демонстрация работы классов////////////////////////////////
    char str[50];
    //ввод и вывод данных здания с квартирами
    Home *Home1 = new Home; // выделение памяти под переменную класса Дом
    Home1->setNumber(12);   //задание значений
    Home1->setNumberOfStories(11); //
    for(int i=0;i<2;i++){     //заполнение массива квартир
     Apartment *apart = new Apartment; // выделение памяти под переменную класса Квартира
     apart->setNumApartment(i); //заполнение
     apart->setCountPeopleApartment(i);
     apart->setAreaApartment(25.5);
     apart->setPayApartment(1254);
     Home1->addApartment(i,*apart);//добавление объектов в массив
    }
    std::cout << *Home1;
    //ввод и вывод данных улиц с домами
        Street *S1 = new Street; // создание через оператора new
    S1->setName("Lenina");
    for(int i=0;i<2;i++){
      S1->addHome2(i,*Home1);//добавление домов
    }
    std::cout << *S1 << "\n";

    S1->delHome(Homes.getSize()); //удаляем последний дом
    cout << "delete last home on this street";
    std::cout << *S1 << "\n";      //печатаем улицу

    ////////////////////////////////////////////////////////////////////
    cout << "Enter Name for the new street" << "\n";   //ввод данных с клавиатуры
    cin >> str;
     Street S2 = Street(str);       //построение объекта через конструктор
    cout << S2 << "\n" ;            //вывод на экран
    Street S3 = *S1;
    cout <<"\n" << "new street S3" << "\n";
    cout << *S1 << "\n\n" ;            //вывод на экран
    *S1 + S3;                 //перегрузка оператора сложения
    cout << "overloading S1 + S3" << "\n";
    cout << *S1 << "\n" ;            //вывод на экран
    getch();
    delete Home1;
    delete S1;
    return 0;
}
//---------------------------------------------------------------------------














